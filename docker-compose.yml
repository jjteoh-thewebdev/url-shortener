# WARNING: This is not a production-ready docker compose
# Do not use weak password for production

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: url-shortener-frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.docker.env
    depends_on:
      - backend-management
      - backend-redirector
    networks:
      - url-shortener-network
    # Add OpenTelemetry environment variables
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=frontend
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  backend-management:
    build:
      context: ./backend-management
      dockerfile: Dockerfile
    container_name: url-shortener-management
    ports:
      - "3001:3001"
    env_file:
      - ./backend-management/.docker.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - url-shortener-network
    # Add OpenTelemetry environment variables
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=backend-management
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  backend-redirector:
    build:
      context: ./backend-redirector
      dockerfile: Dockerfile
    container_name: url-shortener-redirector
    ports:
      - "3002:3002"
    env_file:
      - ./backend-redirector/.docker.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - url-shortener-network
    # Add OpenTelemetry environment variables
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=backend-redirector
      - OTEL_TRACES_SAMPLER=parentbased_always_on

  postgres:
    image: postgres:16-alpine
    container_name: url-shortener-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: url_shortener
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - url-shortener-network

  redis:
    image: redis:7-alpine
    container_name: url-shortener-redis
    command: redis-server --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - url-shortener-network

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: url-shortener-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - url-shortener-network

  grafana:
    image: grafana/grafana:latest
    container_name: url-shortener-grafana
    ports:
      - "3003:3000"
    volumes:
      - ./observability/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - prometheus
      - loki
    networks:
      - url-shortener-network

  loki:
    image: grafana/loki:latest
    container_name: url-shortener-loki
    ports:
      - "3100:3100"
      - "3200:3200"
    volumes:
      - ./observability/loki:/etc/loki
      - loki_data:/loki
      - loki_wal:/loki/wal
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - url-shortener-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: url-shortener-jaeger
    ports:
      - "6831:6831/udp"  # jaeger-agent
      - "6832:6832/udp"  # jaeger-agent
      - "5778:5778"      # jaeger-agent
      - "16686:16686"    # jaeger-query
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
      - "14250:14250"    # jaeger-agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/var/lib/jaeger
    networks:
      - url-shortener-network

networks:
  url-shortener-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:
  loki_wal:
  jaeger_data: 